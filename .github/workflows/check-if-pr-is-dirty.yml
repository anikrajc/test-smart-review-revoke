name: Smart Review Revoker | PR

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref }}
  cancel-in-progress: true

run-name: ${{ github.event.pull_request.title }} | ${{ github.event.pull_request.number }}

on:
  pull_request:
    branches:
      - main

jobs:
  hello_world_job:
      runs-on: ubuntu-latest
      name: A job to say hello
      steps:
        - name: Hello world action step
          id: hello
          uses: anikrajc/test-file-safe-check-action@v1
          with:
            who-to-greet: 'Mona the Octocat'
        # Use the output from the `hello` step
        - name: Get the output time
          run: echo "The time was ${{ steps.hello.outputs.time }}"
  check-if-pr-commit-is-dirty:
    runs-on: ubuntu-latest
    name: Print all commits
    steps:
      - name: Download Previously Approved Commit ID
        id: download-artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: save-pr-approved-commit-sha.yml
          workflow_conclusion: success
          search_artifacts: true
          name: approved-commit-id-${{github.event.pull_request.number}}
          if_no_artifact_found: warn
      - shell: bash
        run: |
          value=`cat approved-commit-id.txt`
          echo Approved commit id $value
          echo "Current head sha: ${{ github.event.pull_request.head.sha }}"
          echo "Current head red: ${{ github.event.pull_request.head.ref }}"
          echo "APPROVED_COMMIT_ID=$value" >> $GITHUB_ENV
      - run: echo ${{ env.APPROVED_COMMIT_ID }}

      - name: 'PR commits + 1'
        run: echo "PR_FETCH_DEPTH=$(( ${{ github.event.pull_request.commits }} + 1 ))" >> "${GITHUB_ENV}"

      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
          ref: "${{ env.APPROVED_COMMIT_ID }}"
          path: repo-old

      - uses: actions/checkout@v3
        with:
          fetch-depth: ${{ env.PR_FETCH_DEPTH }}
          ref: "${{ github.event.pull_request.head.sha }}"
          path: repo-new

      - name: Get changed files using defaults
        id: changed-files
        uses: tj-actions/changed-files@v32
        with:
          path: repo-new
          base_sha: ${{ env.APPROVED_COMMIT_ID }}
          sha: ${{ github.event.pull_request.head.sha }}
      - name: Check review is stale
        id: stale-check
        run: |
          added_files="${{ steps.changed-files.outputs.added_files }}"
          copied_files="${{ steps.changed-files.outputs.copied_files }}"
          deleted_files="${{ steps.changed-files.outputs.deleted_files }}"
          modified_files="${{ steps.changed-files.outputs.modified_files }}"
          renamed_files="${{ steps.changed-files.outputs.renamed_files }}"
          type_changed_files="${{ steps.changed-files.outputs.type_changed_files }}"
          unmerged_files="${{ steps.changed-files.outputs.unmerged_files }}"
          unknown_files="${{ steps.changed-files.outputs.unknown_files }}"

          if [ ! -z "$added_files" -a "$added_files" != " " ]; then
              echo "Files added, quitting early"
              echo "::set-output name=stale::yes"
          elif [ ! -z "$copied_files" -a "$copied_files" != " " ]; then
              echo "Files copied, quitting early"
              echo "::set-output name=stale::yes"
          elif [ ! -z "$deleted_files" -a "$deleted_files" != " " ]; then
              echo "Files deleted, quitting early"
              echo "::set-output name=stale::yes"
          elif [ ! -z "$renamed_files" -a "$renamed_files" != " " ]; then
              echo "Files renamed, quitting early"
              echo "::set-output name=stale::yes"
          elif [ ! -z "$type_changed_files" -a "$type_changed_files" != " " ]; then
              echo "Files type changed, quitting early"
              echo "::set-output name=stale::yes"
          elif [ ! -z "$unmerged_files" -a "$unmerged_files" != " " ]; then
              echo "Files unmerged, quitting early"
              echo "::set-output name=stale::yes"
          elif [ ! -z "$unknown_files" -a "$unknown_files" != " " ]; then
              echo "Files unknown, quitting early"
              echo "::set-output name=stale::yes"
          elif [ ! -z "$modified_files" -a "$modified_files" != " " ]; then
              for file in ${{ steps.changed-files.outputs.modified_files }}; do
                  echo "$file was modified"
              done
              echo "::set-output name=stale::no"
          else
              echo "No changes"
              echo "::set-output name=stale::no"
          fi
      - uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: '${{github.event.pull_request.number}}',
              owner: '${{github.event.repository.owner.login}}',
              repo: '${{github.event.repository.name}}',
              body: 'ðŸ‘‹ Output of run is ${{ steps.stale-check.outputs.stale }}!'
            })
