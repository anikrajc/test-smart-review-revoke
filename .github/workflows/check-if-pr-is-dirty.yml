name: Smart Review Revoker

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref }}
  cancel-in-progress: true

env:
  SRR_ANALYTICS_ENDPOINT: https://us-central1-testsrr-495b8.cloudfunctions.net/analyticsChangesSafe
  SRR_APPROVED_REVIEWS_ENDPOINT: https://us-central1-testsrr-495b8.cloudfunctions.net/getApprovedReviews

run-name: SRR | PR ${{ github.event.pull_request.number }} | ${{ github.event.pull_request.title }}

on:
  pull_request:
    branches:
      - main

jobs:

  check-existing-reviews:
    runs-on: ubuntu-latest
    name: Check existing reviews
    outputs:
      ERROR: ${{ steps.get-existing-reviews.outputs.ERROR }}
      APPROVED_COMMIT_ID: ${{ steps.get-existing-reviews.outputs.APPROVED_COMMIT_ID }}
      REVIEW_IDS: ${{ steps.get-existing-reviews.outputs.REVIEW_IDS }}
    steps:
      - name: Get existing reviews
        id: get-existing-reviews
        run: |
          response=$(curl --location --request POST '${{ env.SRR_APPROVED_REVIEWS_ENDPOINT }}' --header 'Content-Type: application/json' --data-raw '{ "organisation" : "${{github.event.repository.owner.login}}", "repository" : "${{github.event.repository.name}}", "number" : "${{github.event.pull_request.number}}", "password" : "${{ secrets.SRR_API_PASSWORD }}" }')
          if [ -n "$response" ]; then
              commitId=$(echo "$response" | sed -n 1p)
              reviewIds=$(echo "$response" | sed -n 2p)
              echo "APPROVED_COMMIT_ID=$commitId" >> $GITHUB_OUTPUT
              echo "REVIEW_IDS=$reviewIds" >> $GITHUB_OUTPUT
          else
              errorReason="No approved reviews, quiting early."
              echo $errorReason
              echo "ERROR=$errorReason" >> $GITHUB_OUTPUT
          fi

      - name: Send No approved reviews comments
        if: ${{ steps.get-existing-reviews.outputs.ERROR }}
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: '${{github.event.pull_request.number}}',
              owner: '${{github.event.repository.owner.login}}',
              repo: '${{github.event.repository.name}}',
              body: 'ðŸ¤– SRR : ${{ steps.get-existing-reviews.outputs.ERROR }}'
            })

  check-if-changes-are-safe:
    needs: check-existing-reviews
    if: ${{ needs.check-existing-reviews.outputs.APPROVED_COMMIT_ID }}
    runs-on: ubuntu-latest
    name: Safe change check
    steps:

      - name: "Fetch PR depth"
        id: fetch-pr-depth
        run: echo "PR_FETCH_DEPTH=$(( ${{ github.event.pull_request.commits }} + 1 ))" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
          ref: "${{ needs.check-existing-reviews.outputs.APPROVED_COMMIT_ID }}"
          path: old-code

      - uses: actions/checkout@v3
        with:
          fetch-depth: ${{ steps.fetch-pr-depth.outputs.PR_FETCH_DEPTH }}
          ref: "${{ github.event.pull_request.head.sha }}"
          path: new-code

      - name: Get changed files using defaults
        id: changed-files
        uses: tj-actions/changed-files@v32
        with:
          json: true
          path: new-code
          base_sha: ${{ needs.check-existing-reviews.outputs.APPROVED_COMMIT_ID }}
          sha: ${{ github.event.pull_request.head.sha }}

      - name: Safe modification check
        id: safe-modification-check
        uses: anikrajc/test-file-safe-check-action@v6
        with:
          old-code: old-code
          new-code: new-code
          all-changed-files: '{ "added_files":${{ steps.changed-files.outputs.added_files }}, "copied_files":${{ steps.changed-files.outputs.copied_files }}, "deleted_files":${{ steps.changed-files.outputs.deleted_files }}, "modified_files":${{ steps.changed-files.outputs.modified_files }}, "renamed_files":${{ steps.changed-files.outputs.renamed_files }}, "type_changed_files":${{ steps.changed-files.outputs.type_changed_files }}, "unmerged_files":${{ steps.changed-files.outputs.unmerged_files }}, "unknown_files":${{ steps.changed-files.outputs.unknown_files }} }'
          ignore-list: "[\"ignoredfile.sh\", \"somefolder/ignorefile2.sh\"]"
          start-marker: "test-srr-start"
          end-marker: "test-srr-end"

      - name: Send comments
        uses: actions/github-script@v6
        with:
          script: |
            if ("${{ steps.safe-modification-check.outputs.is-safe-change }}" == "true") {
                  github.rest.issues.createComment({
                  issue_number: '${{github.event.pull_request.number}}',
                  owner: '${{github.event.repository.owner.login}}',
                  repo: '${{github.event.repository.name}}',
                  body: 'ðŸ¤– SRR : Changes were safe'
                })
            } else {
                  github.rest.issues.createComment({
                  issue_number: '${{github.event.pull_request.number}}',
                  owner: '${{github.event.repository.owner.login}}',
                  repo: '${{github.event.repository.name}}',
                  body: 'ðŸ¤– SRR : Changes were not safe, revoking reviews.'
                })

                let reviews = "${{needs.check-existing-reviews.outputs.REVIEW_IDS}}".split(" ")
                for (const review of reviews) {
                    github.rest.pulls.dismissReview({
                      owner: '${{github.event.repository.owner.login}}',
                      repo: '${{github.event.repository.name}}',
                      pull_number: '${{github.event.pull_request.number}}',
                      review_id: review,
                      message: 'Dismissed by SRR',
                      event: 'DISMISS'
                    });
                }
            }

      - name: Send analytics
        if: ${{ steps.safe-modification-check.outputs.is-safe-change == 'true' }}
        run: |
          reviews='${{needs.check-existing-reviews.outputs.REVIEW_IDS}}'
          arr_reviews=($reviews)
          count=${#arr_reviews[@]}
          echo $count
          curl --location --request POST '${{ env.SRR_ANALYTICS_ENDPOINT }}' --header 'Content-Type: application/json' --data-raw '{ "organisation" : "${{github.event.repository.owner.login}}", "repository" : "${{github.event.repository.name}}", "number" : "${{github.event.pull_request.number}}", "password" : "${{ secrets.SRR_API_PASSWORD }}", "existingReviewCount" : '$count' }'
