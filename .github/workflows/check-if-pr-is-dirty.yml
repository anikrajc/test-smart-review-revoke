name: Smart Review Revoker | PR

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref }}
  cancel-in-progress: true

run-name: ${{ github.event.pull_request.title }} | ${{ github.event.pull_request.number }}

on:
  pull_request:
    branches:
      - main

jobs:

  check-if-pr-commit-is-dirty:
    runs-on: ubuntu-latest
    name: Print all commits
    steps:
      - name: Download Previously Approved Commit ID
        id: download-artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: save-pr-approved-commit-sha.yml
          workflow_conclusion: success
          search_artifacts: true
          name: approved-commit-id-${{github.event.pull_request.number}}
          if_no_artifact_found: warn
      - shell: bash
        run: |
          value=`cat approved-commit-id.txt`
          echo Approved commit id $value
          echo "Current head id: ${{ github.event.pull_request.head.sha }}"
          echo "APPROVED_COMMIT_ID=$value" >> $GITHUB_ENV
      - run: echo ${{ env.APPROVED_COMMIT_ID }}
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get changed files using defaults
        id: changed-files
        uses: tj-actions/changed-files@v32
        with:
          base_sha: ${{ env.APPROVED_COMMIT_ID }}
          sha: ${{ github.event.pull_request.head.sha }}
      - name: Check review is stale
        run: |
          for file in ${{ steps.changed-files.outputs.added_files }}; do
            echo "$file was added"
          done
          for file in ${{ steps.changed-files.outputs.modified_files }}; do
            echo "$file was modified"
          done
          for file in ${{ steps.changed-files.outputs.deleted_files }}; do
            echo "$file was deleted"
          done
      - uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: '${{github.event.pull_request.number}}',
              owner: '${{github.event.repository.owner.login}}',
              repo: '${{github.event.repository.name}}',
              body: 'ðŸ‘‹ Test!'
            })
